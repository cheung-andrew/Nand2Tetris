
// sub table: value int local 0

function Main.main 1

// do Main.fillMemory(8001, 16, -1); // sets RAM[8001]..RAM[8016] to -1
push constant 8001
push constant 16
push constant 1
neg
call Main.fillMemory 3
pop temp 0

// let value = Memory.peek(8000);    // reads a value from RAM[8000]
push constant 8000
call Memory.peek 1
pop local 0

// do Main.convert(value);           // performs the conversion
push local 0
call Main.convert 1
pop temp 0

// return;
push constant 0
return

// function void convert(int value) {
function Main.convert 3


//    	var int mask, position;
//    	var boolean loop;
// value int arg 0, mask int local 0, position int local 1, loop boolean local 2

// let loop = true;
push constant 1
neg
pop local 2

// while (loop) {
label If_True_0
push local 2
not
if-goto If_Not_True_0

// let position = position + 1;
push local 1
push constant 1
add
pop local 1

// let mask = Main.nextMask(mask);
push local 0
call Main.nextMask 1
pop local 0

// if (~(position > 16)) {
push local 1
push constant 16
gt
not 
not 
if-goto If_Not_True_1

// if (~((value & mask) = 0)) {
push argument 0
push local 0
and
push constant 0
eq
not 
not
if-goto If_Not_True_2

// do Memory.poke(8000 + position, 1);
push constant 8000
push local 1
add
push constant 1
call Memory.poke 2
pop temp 0

goto If_True_2

//  	        }
// 	        else {

label If_Not_True_2


// do Memory.poke(8000 + position, 0);
push constant 8000
push local 1
add
push constant 0
call Memory.poke 2
pop temp 0
    
label If_True_2
goto If_True_1
//     	    else {
label If_Not_True_1

//     	        let loop = false;
push constant 0
pop local 2

label If_True_1
goto If_True_0
label If_Not_True_0
//     	return;
push constant 0
return


//     function int nextMask(int mask) {
// mask int arg 0
function Main.nextMask 0

// if (mask = 0) {
push argument 0
push constant 0
eq 
not 
if-goto If_Not_True_3

// return 1;
push constant 1
return 
goto If_True_3

//	else {
label If_Not_True_3

// return mask * 2;
push argument 0
push constant 2
call Math.multiply 2
return 
label If_True_3
		
		
	    
// function void fillMemory(int startAddress, int length, int value) {
function Main.fillMemory 0
// startAddress int arg 0, length int arg 1, value int arg 2

// while (length > 0) {
label If_True_4
push argument 1
push constant 0
gt
not 
if-goto If_Not_True_4

// do Memory.poke(startAddress, value);
push argument 0
push argument 2
call Memory.poke 2
pop temp 0
            
// let length = length - 1;
push argument 1
push constant 1
sub
pop argument 1

// let startAddress = startAddress + 1;
push argument 0
push constant 1
add
pop argument 0
goto If_True_4
//}

// return;
label If_Not_True_4

push constant 0
return 
            