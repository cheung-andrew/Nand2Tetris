// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static int current_color;
	static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 32767 + 1;
		let current_color = 1;
		return; 
    }

    /** Erases the entire screen. */
    function void clearScreen() {
	// clear 16384 - 24575
		var int scr_register;
		let scr_register = 16384;
		while (scr_register < 24576) {
			do Memory.poke(scr_register, 0);
			let scr_register = scr_register + 1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		if (b) { let current_color = 1;}
		else { let current_color = 0; }
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int pixel_addr, addr_value, new_value, bit_location, not_value;
		let pixel_addr = (y * 32);
		let pixel_addr = pixel_addr + (x / 16);
		let addr_value = Memory.peek(16384 + pixel_addr);
		let bit_location = x - (16 * (x/16));
		if (current_color = 1) {
			let new_value = (addr_value | twoToThe[bit_location]);
			do Memory.poke((16384 + pixel_addr), new_value);
		}
		else {
			let not_value = (~(twoToThe[bit_location]));
			let new_value = (addr_value & not_value);
			do Memory.poke(16384 + pixel_addr, new_value);
		}
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		// straight line (dx / dy = 0) needs optimization 
		var int a, b, x, y, diff, dx, dy; 
		let a = 0;
		let b = 0;
		let x = x1;
		let y = y1;
		let diff = 0;
		let dx = Math.abs(x2 - x1);
		let dy = Math.abs(y2 - y1);

		if ((x2 > x1) & (y2 > y1)) {
			while (((a < dx ) | (a = dx)) & ((b < dy) | (b = dy))) {
				do Screen.drawPixel((x + a), (y + b));
				if (diff < 0) { 
					let a = a + 1;
					let diff = diff + dy;
				}
				else {
					let b = b + 1;
					let diff = diff - dx;
				}
			}
			return;
		}
		if ((x2 > x1) & (y2 < y1)) {
			while (((a < dx ) | (a = dx)) & ((b < dy) | (b = dy))) {
				do Screen.drawPixel((x + a), (y - b));
				if (diff < 0) { 
					let a = a + 1;
					let diff = diff + dy;
				}
				else {
					let b = b + 1;
					let diff = diff - dx;
				}
			}
			return;
		}
		if ((x2 < x1) & (y2 < y1)) {
			while (((a < dx ) | (a = dx)) & ((b < dy) | (b = dy))) {
				do Screen.drawPixel((x - a), (y - b));
				if (diff < 0) { 
					let a = a + 1;
					let diff = diff + dy;
				}
				else {
					let b = b + 1;
					let diff = diff - dx;
				}
			}
			return;
		}
		
		if ((x2 < x1) & (y2 > y1)) {
			while (((a < dx ) | (a = dx)) & ((b < dy) | (b = dy))) {
				do Screen.drawPixel((x - a), (y + b));
				if (diff < 0) { 
					let a = a + 1;
					let diff = diff + dy;
				}
				else {
					let b = b + 1;
					let diff = diff - dx;
				}
			}
			return;
		}
		
		if (dx = 0) {
			if (y2 > y1) {
				while ((b < dy) | (b = dy)) {
					do Screen.drawPixel(x, (y + b));
					let b = b + 1;
				}
				return;
			}
			if (y2 < y1) {
				while ((b < dy) | (b = dy)) {
					do Screen.drawPixel(x, (y - b));
					let b = b + 1;
				}
				return;
			}
		}
		if (dy = 0) {
			if (x2 > x1) {
				while ((a < dx ) | (a = dx)) {
					do Screen.drawPixel((x+a), y);
					let a = a + 1;
				}
				return;
			}
			if (x2 < x1) {
				while ((a < dx ) | (a = dx)) {
					do Screen.drawPixel((x-a), y);
					let a = a + 1;
				}
				return;
			}
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int x0;
		let x0 = x1;
		while (x0 < (x2+1)) {
			do Screen.drawLine(x0, y1, x0, y2);
			let x0 = x0 + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		// overflow: Limiting circle radii to be at most 181 is a reasonable solution
		var int dy, ax, ay, bx, by;
		let dy = r * -1;
		while ((dy < (r + 1)) & (~(r > 181))) {
			let ax = x - Math.sqrt((r * r) - (dy * dy));
			let ay = y + dy;
			let bx = x + Math.sqrt((r * r) - (dy * dy));
			let by = y + dy;
			do Screen.drawLine(ax, ay, bx, by);
			let dy = dy + 1;
		}
		return;
    }
}
