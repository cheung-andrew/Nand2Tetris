// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array memory;
	static Array freeList;
	
    /** Initializes the class. */
    function void init() {
		var Array heap;
		let memory = 0;
		let heap = 2048;
		let freeList = 2048;
		let freeList[0] = 14334;
		let freeList[1] = 0;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let memory[address] = value;
		return; 
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int total_size;
		var Array current_block;	

		let total_size = size + 2;
		let current_block = Memory.findBlock(size);
		
		// after finding block 	
		let freeList = current_block + total_size;
		
		let freeList[0] = current_block[0] - total_size;
		let freeList[1] = null;
		let current_block[0] = size; // the length section describes DATA 
		let current_block[1] = null; 

		return current_block + 2; // return only the data section 
    }
	
	function int findBlock(int size) {
		var Array next_block; 
		let next_block = freeList; 
		
		while (next_block[0] < size) {
			let next_block = next_block[1];
			if (next_block = null) { 
				do Output.printString("no memory found");
				return -1;
			}
		}
		
		return next_block;
	}
		

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
	// best fit or first fit is fine
		var int length_header, next_header, current_freeList;
		let current_freeList = freeList;
		let freeList = o - 2;
		let freeList[1] = current_freeList;
		return;
    }    
}
